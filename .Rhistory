install.packages("tidyverse")
install.packages("jsonlite")
install.packages("jsonlite", type = "source")
install.packages("tidyverse")
install.packages("tidyverse", type = "source")
?ggplot()
?ggplot()
head(mpg)
install.packages("tidyverse")
?ggplot()
install.packages("ggplot2")
?ggplot()
head(mpg)
library(tidyverse)
?ggplot()
head(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt <- ggplot(mpg,aes(x=class))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt <- ggplot(mpg,aes(x=class))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
rlang::last_error()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt <- ggplot(mpg,aes(x=class))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg,aes(x=class))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
library(tidyverse)
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
shapiro.test(mtcars$wt)
?shapiro.test()
setwd("C:/Users/Admin/OneDrive/Data Analytics Bootcamp/Module 15 R/R_Analysis/01_Demo")
?sample_n()
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
?aov()
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
# another example using used_car dataset
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
head(mtcars)
lm(mpg ~ cyl + wt + hp + disp,data=mtcars)
summary(lm(mpg ~ cyl + wt + hp + disp,data=mtcars))
?chisq.test()
table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("C:/Users/Admin/OneDrive/Data Analytics Bootcamp/Module 15 R/MechaCar_Statistical_Analysis")
library(tidyverse)
mechacar_data <- read.csv('MechaCar_mpg.csv') #import dataset
View(mechacar_data)
View(mechacar_data)
head(mechacar_data)
lm(mpg ~ vehicle_length + vehicle_weight  + spoiler_angle  + ground_clearance +
AWD,data=mechacar_data)
summary(lm(mpg ~ vehicle_length + vehicle_weight  + spoiler_angle  + ground_clearance +
AWD,data=mechacar_data))
setwd("C:/Users/Admin/OneDrive/Data Analytics Bootcamp/Module 15 R/MechaCar_Statistical_Analysis")
clear
clc
mpgReg = lm(mpg ~ vehicle_length + vehicle_weight  + spoiler_angle  + ground_clearance +
AWD,data=mechacar_data)
# generate summary statistics
summary(mpgReg)
equation1=function(x){coef(fit1)[2]*x+coef(fit1)[1]}
View(equation1)
View(equation1)
View(mechacar_data)
View(mechacar_data)
View(mtcars_filt)
View(mtcars_filt)
View(mpg_data)
View(mpg_data)
plt <- ggplot(mpgReg,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point()+geom_smooth(method="lm")
plt <- ggplot(mpgReg,aes(x=vehicle_weight,y=mpg)) #import dataset into ggplot2
plt + geom_point()+geom_smooth(method="lm")
# plotting regression of length and mpg
plt <- ggplot(mpgReg,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point()+ stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1])
# plotting regression of weight and mpg
plt + geom_point()+ stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1])
# create an equation for each independent variables
equation1=function(x){coef(mpgReg)[2]*x+coef(mpgReg)[1]}
equation2=function(x){coef(mpgReg)[3]*x+coef(mpgReg)[1]+coef(mpgReg)[2]}
equation3=function(x){coef(mpgReg)[4]*x+coef(mpgReg)[1]+coef(mpgReg)[3]}
equation4=function(x){coef(mpgReg)[5]*x+coef(mpgReg)[1]+coef(mpgReg)[4]}
equation5=function(x){coef(mpgReg)[6]*x+coef(mpgReg)[1]+coef(mpgReg)[5]}
# plotting regression of length and mpg
plt <- ggplot(mpgReg,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point()+ stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1])
# plotting regression of weight and mpg
plt <- ggplot(mpgReg,aes(x=vehicle_weight,y=mpg)) #import dataset into ggplot2
mpgReg = lm(mpg ~ vehicle_length + vehicle_weight  + spoiler_angle  + ground_clearance +
AWD,data=mechacar_data)
mpgReg
summary(mpgReg)
equation1=function(x){coef(mpgReg)[2]*x+coef(mpgReg)[1]+coef(mpgReg)[2]}
plt <- ggplot(mpgReg,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point()+ stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1])
# plotting regression of weight and mpg
plt <- ggplot(mpgReg,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point()+ stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1]) +
+geom_smooth(method="lm")
plt <- ggplot(mpgReg,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point()+ stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1]) +
geom_smooth(method="lm")
plt <- ggplot(mpgReg,aes(x=vehicle_weight,y=mpg)) #import dataset into ggplot2
plt + geom_point()+ stat_function(fun=equation2,geom="line",color=scales::hue_pal()(2)[1]) +
geom_smooth(method="lm")
plt <- ggplot(mpgReg,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point()+ stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1]) +
geom_smooth(method="lm")
library(tidyverse)
suscoil_data <- read.csv('Suspension_Coil.csv') #import dataset
head(suscoil_data)
total_summary <- suscoil_data %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Var_PSI=var(PSI),
SD_PSI)
# total summary df using summarize on PSI column
total_summary <- suscoil_data %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Var_PSI=var(PSI),
SD_PSI=sqrt(Var_PSI))
View(total_summary)
View(total_summary)
lot_summary <- suscoil_data %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Var_PSI=var(PSI),
SD_PSI=sqrt(Var_PSI),
.groups = 'keep')
View(lot_summary)
View(lot_summary)
# box plots to show outliers
plt <- ggplot(suscoil_data,aes(x=Manufacturing_Lot,y=PSI)) #import dataset into ggplot2
plt + geom_boxplot(outlier.colour = "red", outlier.shape = 1) + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
# we can use geom_density() to visualize the entire population set
plt <- ggplot(suscoil_data,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
# important to use log10 to keep number low for better distribution
# we can use sample to create a similar distribution to the full population
sample_table <- suscoil_data %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
# we can use sample to create a similar distribution to the full population
sample_table <- suscoil_data %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
# we can use sample to create a similar distribution to the full population
sample_table <- suscoil_data %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
# we can use sample to create a similar distribution to the full population
sample_table <- suscoil_data %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
# we can use sample to create a similar distribution to the full population
sample_table <- suscoil_data %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
plt <- ggplot(suscoil_data,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
# important to use log10 to keep number low for better distribution
sample_table <- suscoil_data %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$PSI),mu=mean(log10(suscoil_data$PSI))) #compare sample versus population means
# we can use geom_density() to visualize the entire population set
plt <- ggplot(suscoil_data,aes(x=(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
# important to use log10 to keep number low for better distribution
plt <- ggplot(sample_table,aes(x=(PSI))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
# T test for comparing total dataset to sample dataset
t.test((sample_table$PSI),mu=mean((suscoil_data$PSI))) #compare sample versus population means
head(suscoil_data)
lot1 <- subset(suscoil_data, Manufacturing_Lot == "Lot1" %in% PSI)
lot1
lot1 <- subset(suscoil_data, Manufacturing_Lot == "Lot1 " %in% PSI)
lot1
lot1 <- subset(suscoil_data, Manufacturing_Lot == "Lot1")
lot1
lot1 <- subset(suscoil_data, Manufacturing_Lot == "Lot1")
lot2 <- subset(suscoil_data, Manufacturing_Lot == "Lot2")
lot3 <- subset(suscoil_data, Manufacturing_Lot == "Lot3")
ttest1 = t.test((lot1$PSI),mu=mean((suscoil_data$PSI))) #compare sample versus population means
View(ttest1)
ttest1
ttest2
ttest3
ttest1
ttest2 = t.test((lot2$PSI),mu=mean((suscoil_data$PSI))) #compare sample versus population means
ttest3 = t.test((lot3$PSI),mu=mean((suscoil_data$PSI))) #compare sample versus population means
ttest1
ttest2
ttest3
